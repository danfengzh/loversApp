<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.loversAPP.dao.ActivityrecordsMapper">
  <cache type="org.loversAPP.Cache.RedisCache"/>
  <resultMap id="BaseResultMap" type="org.loversAPP.model.Activityrecords">
    <id column="id" jdbcType="INTEGER" property="id" />
    <id column="loverID" jdbcType="VARCHAR" property="loverid" />
    <result column="totalSteps" jdbcType="INTEGER" property="totalsteps" />
    <result column="radius" jdbcType="INTEGER" property="radius" />
    <result column="longtitude" jdbcType="VARCHAR" property="longtitude" />
    <result column="latitude" jdbcType="VARCHAR" property="latitude" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, loverID, totalSteps, radius, longtitude, latitude
  </sql>
  <select id="selectByExample" parameterType="org.loversAPP.model.ActivityrecordsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from activityrecords
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from activityrecords
    where id = #{id,jdbcType=INTEGER}
    and loverID = #{loverid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    delete from activityrecords
    where id = #{id,jdbcType=INTEGER}
      and loverID = #{loverid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="org.loversAPP.model.ActivityrecordsExample">
    delete from activityrecords
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.loversAPP.model.Activityrecords">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into activityrecords (loverID, totalSteps, radius,
    longtitude, latitude)
    values (#{loverid,jdbcType=VARCHAR}, #{totalsteps,jdbcType=INTEGER}, #{radius,jdbcType=INTEGER},
    #{longtitude,jdbcType=VARCHAR}, #{latitude,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.loversAPP.model.Activityrecords">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into activityrecords
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="loverid != null">
        loverID,
      </if>
      <if test="totalsteps != null">
        totalSteps,
      </if>
      <if test="radius != null">
        radius,
      </if>
      <if test="longtitude != null">
        longtitude,
      </if>
      <if test="latitude != null">
        latitude,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="loverid != null">
        #{loverid,jdbcType=VARCHAR},
      </if>
      <if test="totalsteps != null">
        #{totalsteps,jdbcType=INTEGER},
      </if>
      <if test="radius != null">
        #{radius,jdbcType=INTEGER},
      </if>
      <if test="longtitude != null">
        #{longtitude,jdbcType=VARCHAR},
      </if>
      <if test="latitude != null">
        #{latitude,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.loversAPP.model.ActivityrecordsExample" resultType="java.lang.Long">
    select count(*) from activityrecords
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update activityrecords
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.loverid != null">
        loverID = #{record.loverid,jdbcType=VARCHAR},
      </if>
      <if test="record.totalsteps != null">
        totalSteps = #{record.totalsteps,jdbcType=INTEGER},
      </if>
      <if test="record.radius != null">
        radius = #{record.radius,jdbcType=INTEGER},
      </if>
      <if test="record.longtitude != null">
        longtitude = #{record.longtitude,jdbcType=VARCHAR},
      </if>
      <if test="record.latitude != null">
        latitude = #{record.latitude,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update activityrecords
    set id = #{record.id,jdbcType=INTEGER},
    loverID = #{record.loverid,jdbcType=VARCHAR},
    totalSteps = #{record.totalsteps,jdbcType=INTEGER},
    radius = #{record.radius,jdbcType=INTEGER},
    longtitude = #{record.longtitude,jdbcType=VARCHAR},
    latitude = #{record.latitude,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.loversAPP.model.Activityrecords">
    update activityrecords
    <set>
      <if test="totalsteps != null">
        totalSteps = #{totalsteps,jdbcType=INTEGER},
      </if>
      <if test="radius != null">
        radius = #{radius,jdbcType=INTEGER},
      </if>
      <if test="longtitude != null">
        longtitude = #{longtitude,jdbcType=VARCHAR},
      </if>
      <if test="latitude != null">
        latitude = #{latitude,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
    and loverID = #{loverid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.loversAPP.model.Activityrecords">
    update activityrecords
    set totalSteps = #{totalsteps,jdbcType=INTEGER},
      radius = #{radius,jdbcType=INTEGER},
      longtitude = #{longtitude,jdbcType=VARCHAR},
      latitude = #{latitude,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
      and loverID = #{loverid,jdbcType=VARCHAR}
  </update>
  <select id="selectActivityRecords" resultMap="BaseResultMap">
    SELECT  * FROM activityrecords
  </select>
  <select id="getAllWrapperActicvityRecord" resultType="org.loversAPP.DTO.WrapperActicvityRecord">
    SELECT DISTINCT
user1.userName AS nameA,
user1.avator AS avatarA,
user2.userName AS nameB,
user2.avator AS avatarB,
tempRelation.loveAID,
tempRelation.loveBID,
tempRelation.loverID,
tempRelation.id,
tempRelation.latitude,
tempRelation.longtitude,
tempRelation.radius,
tempRelation.totalSteps,
user1.backImage backImageA
FROM
`user` AS user1 ,
`user` AS user2 ,
(SELECT
lover_ship.loverGirlID loveAID ,
lover_ship.loverBoyID loveBID ,
activityrecords.loverID,
activityrecords.id,
activityrecords.totalSteps,
activityrecords.radius,
activityrecords.longtitude,
activityrecords.latitude
FROM
lover_ship
INNER JOIN activityrecords ON activityrecords.loverID = lover_ship.loverID) AS tempRelation ,
activityrecords
WHERE
user1.id=tempRelation.loveAID
and user2.id=tempRelation.loveBID
  </select>
  <select id="getAllRecordsExceptMe" resultType="org.loversAPP.DTO.WrapperActicvityRecord">
         SELECT DISTINCT
user1.userName AS nameA,
user1.avator AS avatarA,
user2.userName AS nameB,
user2.avator AS avatarB,
tempRelation.loveAID,
tempRelation.loveBID,
tempRelation.loverID,
tempRelation.id,
tempRelation.latitude,
tempRelation.longtitude,
tempRelation.radius,
tempRelation.totalSteps,
user1.backImage backImageA
FROM
`user` AS user1 ,
`user` AS user2 ,
(SELECT
lover_ship.loverGirlID loveAID ,
lover_ship.loverBoyID loveBID ,
activityrecords.loverID,
activityrecords.id,
activityrecords.totalSteps,
activityrecords.radius,
activityrecords.longtitude,
activityrecords.latitude
FROM
lover_ship
INNER JOIN activityrecords ON activityrecords.loverID = lover_ship.loverID) AS tempRelation ,
activityrecords
WHERE
user1.id=tempRelation.loveAID
and user2.id=tempRelation.loveBID
and #{userID} not  IN(user1.id,user2.id)
  </select>
  <update id="updateSelectiveByid" parameterType="java.lang.Integer">
    update activityrecords
    <set>
      <if test="record.loverid != null">
        loverID = #{record.loverid,jdbcType=VARCHAR},
      </if>
      <if test="record.totalsteps != null">
        totalSteps = #{record.totalsteps,jdbcType=INTEGER},
      </if>
      <if test="record.radius != null">
        radius = #{record.radius,jdbcType=INTEGER},
      </if>
      <if test="record.longtitude != null">
        longtitude = #{record.longtitude,jdbcType=VARCHAR},
      </if>
      <if test="record.latitude != null">
        latitude = #{record.latitude,jdbcType=VARCHAR},
      </if>
    </set>
    <where>
      <if test="record.id != null">
        id=#{record.id}
      </if>
    </where>
  </update>
  <select id="getactivityRecordsPositionList" resultType="org.loversAPP.DTO.ActivityRecordsPosition" useCache="false">
    SELECT
activityrecords.radius,
activityrecords.longtitude,
activityrecords.latitude
FROM
activityrecords
  </select>
  <select id="hasCircle" resultType="java.lang.Integer">
     SELECT count(*)
FROM
`user`,
lover_ship
WHERE #{userID} IN(loverBoyID,loverGirlID)
  </select>
</mapper>